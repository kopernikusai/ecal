
.. _program_listing_file_ecal_core_include_ecal_ecal_monitoring.h:

Program Listing for File ecal_monitoring.h
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_ecal_core_include_ecal_ecal_monitoring.h>` (``ecal/core/include/ecal/ecal_monitoring.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /* ========================= eCAL LICENSE =================================
    *
    * Copyright (C) 2016 - 2019 Continental Corporation
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    * 
    *      http://www.apache.org/licenses/LICENSE-2.0
    * 
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    *
    * ========================= eCAL LICENSE =================================
   */
   
   #pragma once
   
   #include <ecal/ecal_os.h>
   #include <string>
   
   namespace eCAL
   {
     namespace Monitoring
     {
       ECAL_API int SetExclFilter(const std::string& filter_);
   
       ECAL_API int SetInclFilter(const std::string& filter_);
   
       ECAL_API int SetFilterState(bool state_);
   
       ECAL_API int GetMonitoring(std::string& mon_);
   
       ECAL_API int GetLogging(std::string& log_);
   
       ECAL_API int PubMonitoring(bool state_, std::string name_ = "ecal.monitoring");
   
       ECAL_API int PubLogging(bool state_, std::string name_ = "ecal.logging");
     }
   }
   
   #ifdef ECAL_C_DLL
   
   #include <ecal/ecalc.h>
   
   namespace eCAL
   {
     namespace Monitoring
     {
       inline int SetExclFilter(const std::string& filter_)
       {
         return(eCAL_Monitoring_SetExclFilter(filter_.c_str()));
       }
   
       inline int SetInclFilter(const std::string& filter_)
       {
         return(eCAL_Monitoring_SetInclFilter(filter_.c_str()));
       }
   
       inline int SetFilterState(bool state_)
       {
         return(eCAL_Monitoring_SetFilterState(state_));
       }
   
       inline int GetMonitoring(std::string& mon_)
       {
         void* buf = nullptr;
         size_t buf_len = eCAL_Monitoring_GetMonitoring(&buf, ECAL_ALLOCATE_4ME);
         if(buf_len > 0)
         {
           mon_ = std::string(static_cast<char*>(buf), buf_len);
           eCAL_FreeMem(buf);
         }
         return(static_cast<int>(mon_.size()));
       }
   
       inline int GetLogging(std::string& mon_)
       {
         void* buf = nullptr;
         size_t buf_len = eCAL_Monitoring_GetLogging(&buf, ECAL_ALLOCATE_4ME);
         if(buf_len > 0)
         {
           mon_ = std::string(static_cast<char*>(buf), buf_len);
           eCAL_FreeMem(buf);
         }
         return(static_cast<int>(mon_.size()));
       }
   
       inline int PubMonitoring(bool state_, const std::string& name_)
       {
         return(eCAL_Monitoring_PubMonitoring(state_, name_.c_str()));
       }
   
       inline int PubLogging(bool state_, const std::string& name_)
       {
         return(eCAL_Monitoring_PubLogging(state_, name_.c_str()));
       }
     }
   }
   
   #endif /* ECAL_C_DLL */
